{"version":3,"file":"static/js/765.2904beeb.chunk.js","mappings":"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","sources":["components/NavLink/NavLink.tsx","pages/TradingNotifications/components/TransactionsList.tsx","components/Button/index.tsx","pages/TradingNotifications/TradingNotificationsPage.tsx","socket/index.ts"],"sourcesContent":["import React from \"react\";\r\nimport { NavLink } from \"react-router-dom\";\r\n\r\ninterface ICustomNavLink {\r\n  to: string;\r\n  className?: string;\r\n  activeClassName?: string;\r\n  children: React.ReactNode;\r\n}\r\n\r\nconst CustomNavLink: React.FC<ICustomNavLink> = ({\r\n  to,\r\n  className,\r\n  activeClassName,\r\n  children,\r\n}) => {\r\n  return (\r\n    <NavLink\r\n      to={to}\r\n      className={({ isActive }) =>\r\n        `${className ? className : \"p-4 m-2 bg-slate-400 rounded\"} ${\r\n          isActive ? activeClassName : \"text-white hover:text-black\"\r\n        }`\r\n      }\r\n    >\r\n      {children}\r\n    </NavLink>\r\n  );\r\n};\r\n\r\nexport default CustomNavLink;\r\n","import React from \"react\";\r\nimport { Transaction } from \"../TradingNotificationsPage\";\r\n\r\ninterface ITransactionsListProps {\r\n  transactions: Transaction[];\r\n}\r\n\r\nconst TransactionsList: React.FC<ITransactionsListProps> = ({\r\n  transactions,\r\n}) => {\r\n  return (\r\n    <table className=\"min-w-full\">\r\n      <thead>\r\n        <tr className=\"w-full bg-gray-100 border-b border-gray-200\">\r\n          <th className=\"border-2 border-black text-center\">From</th>\r\n          <th className=\"border-2 border-black text-center\">To</th>\r\n          <th className=\"border-2 border-black text-center\">Sum</th>\r\n        </tr>\r\n      </thead>\r\n      <tbody>\r\n        {transactions.map((transaction, index) => (\r\n          <tr key={index} className=\"border-b border-gray-200\">\r\n            <td className=\"border-2 border-black text-center\">\r\n              {transaction.from}\r\n            </td>\r\n            <td className=\"border-2 border-black text-center\">\r\n              {transaction.to}\r\n            </td>\r\n            <td className=\"border-2 border-black text-center\">\r\n              {transaction.sum.toFixed(8)}\r\n            </td>\r\n          </tr>\r\n        ))}\r\n      </tbody>\r\n    </table>\r\n  );\r\n};\r\n\r\nexport default TransactionsList;\r\n","import React from \"react\";\r\n\r\ninterface IMyBtn {\r\n  onClick: () => void;\r\n  isDisabled: boolean;\r\n  label: string;\r\n  color?: string;\r\n}\r\n\r\nconst MyBtn: React.FC<IMyBtn> = ({ onClick, isDisabled, label, color }) => {\r\n  return (\r\n    <button\r\n      onClick={onClick}\r\n      className={`px-4 py-2 text-white ${\r\n        isDisabled ? \"bg-gray-600\" : `${color ? color : \"bg-blue-400\"}`\r\n      }`}\r\n      disabled={isDisabled}\r\n    >\r\n      {label}\r\n    </button>\r\n  );\r\n};\r\n\r\nexport default MyBtn;\r\n","import React from \"react\";\r\nimport CustomNavLink from \"../../components/NavLink/NavLink\";\r\nimport TransactionsList from \"./components/TransactionsList\";\r\nimport { useWebSocket } from \"../../socket\";\r\nimport MyBtn from \"../../components/Button\";\r\n\r\nexport interface Transaction {\r\n  from: string;\r\n  to: string;\r\n  sum: number;\r\n}\r\n\r\nconst TradingNotificationsPage: React.FC = () => {\r\n  const {\r\n    transactions,\r\n    totalSum,\r\n    connection,\r\n    subscribe,\r\n    unsubscribe,\r\n    clearData,\r\n  } = useWebSocket();\r\n\r\n  return (\r\n    <div className=\"p-6\">\r\n      <CustomNavLink to=\"/\">Повернутись на попередню сторінку</CustomNavLink>\r\n      <div className=\"flex justify-around mt-6\">\r\n        <MyBtn\r\n          onClick={subscribe}\r\n          isDisabled={!connection}\r\n          label=\"Запуск\"\r\n          color=\"bg-green-600\"\r\n        />\r\n        <MyBtn\r\n          onClick={unsubscribe}\r\n          isDisabled={!connection}\r\n          label=\"Остановка\"\r\n          color=\"bg-red-600\"\r\n        />\r\n        <MyBtn\r\n          onClick={clearData}\r\n          isDisabled={!connection}\r\n          label=\"Сброс\"\r\n          color=\"bg-yellow-500\"\r\n        />\r\n      </div>\r\n      <div className=\"text-xl font-bold text-center my-4\">\r\n        Сумма: {totalSum.toFixed(8)} BTC\r\n      </div>\r\n      <TransactionsList transactions={transactions} />\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default TradingNotificationsPage;\r\n","import { useState, useEffect, useCallback } from \"react\";\r\n\r\nexport interface Transaction {\r\n  from: string;\r\n  to: string;\r\n  sum: number;\r\n}\r\n\r\nexport const useWebSocket = () => {\r\n  const [socket, setSocket] = useState<WebSocket | null>(null);\r\n  const [transactions, setTransactions] = useState<Transaction[]>([]);\r\n  const [totalSum, setTotalSum] = useState<number>(0);\r\n  const [connection, setConnection] = useState<boolean>(false);\r\n\r\n  const connectWebSocket = useCallback(() => {\r\n    const ws = new WebSocket(\"wss://ws.blockchain.info/inv\");\r\n\r\n    ws.onopen = () => {\r\n      console.log(\"WebSocket connection opened\");\r\n      setConnection(true);\r\n    };\r\n\r\n    ws.onmessage = (event: any) => {\r\n      const data = JSON.parse(event.data);\r\n\r\n      if (data) {\r\n        const newTransactions = data.x.inputs.flatMap((input: any) => {\r\n          return data.x.out.map((output: any) => ({\r\n            from: input.prev_out.addr || \"N/A\",\r\n            to: output.addr || \"N/A\",\r\n            sum: output.value / 100000000,\r\n          }));\r\n        });\r\n\r\n        setTransactions((prevTransactions) => {\r\n          const updatedTransactions = [...newTransactions, ...prevTransactions];\r\n          const total = updatedTransactions.reduce(\r\n            (acc, tx) => acc + tx.sum,\r\n            0\r\n          );\r\n          setTotalSum(total);\r\n          return updatedTransactions;\r\n        });\r\n      } else {\r\n        console.warn(\"Invalid data received:\", data);\r\n      }\r\n    };\r\n\r\n    ws.onerror = (error: Event) => {\r\n      console.error(\"WebSocket error:\", error);\r\n    };\r\n\r\n    ws.onclose = () => {\r\n      console.log(\"WebSocket connection closed.\");\r\n      setConnection(false);\r\n    };\r\n\r\n    setSocket(ws);\r\n  }, []);\r\n\r\n  useEffect(() => {\r\n    connectWebSocket();\r\n\r\n    return () => {\r\n      if (socket) {\r\n        socket.close();\r\n      }\r\n    };\r\n  }, [connectWebSocket]);\r\n\r\n  const subscribe = () => {\r\n    if (socket && socket.readyState === WebSocket.OPEN) {\r\n      socket.send(JSON.stringify({ op: \"unconfirmed_sub\" }));\r\n      console.log(\"Subscribed to unconfirmed transactions\");\r\n    } else {\r\n      console.log(\"WebSocket is not open or already subscribed\");\r\n    }\r\n  };\r\n\r\n  const unsubscribe = () => {\r\n    if (socket && socket.readyState === WebSocket.OPEN) {\r\n      socket.send(JSON.stringify({ op: \"unconfirmed_unsub\" }));\r\n      console.log(\"Unsubscribed from unconfirmed transactions\");\r\n    } else {\r\n      console.log(\"WebSocket is not open or not subscribed\");\r\n    }\r\n  };\r\n\r\n  const clearData = () => {\r\n    setTransactions([]);\r\n    setTotalSum(0);\r\n  };\r\n\r\n  return {\r\n    transactions,\r\n    totalSum,\r\n    connection,\r\n    subscribe,\r\n    unsubscribe,\r\n    clearData,\r\n  };\r\n};\r\n"],"names":["_ref","to","className","activeClassName","children","_jsx","NavLink","_ref2","isActive","transactions","_jsxs","map","transaction","index","from","sum","toFixed","onClick","isDisabled","label","color","disabled","TradingNotificationsPage","totalSum","connection","subscribe","unsubscribe","clearData","useWebSocket","socket","setSocket","useState","setTransactions","setTotalSum","setConnection","connectWebSocket","useCallback","ws","WebSocket","onopen","console","log","onmessage","event","data","JSON","parse","newTransactions","x","inputs","flatMap","input","out","output","prev_out","addr","value","prevTransactions","updatedTransactions","total","reduce","acc","tx","warn","onerror","error","onclose","useEffect","close","readyState","OPEN","send","stringify","op","CustomNavLink","MyBtn","TransactionsList"],"sourceRoot":""}